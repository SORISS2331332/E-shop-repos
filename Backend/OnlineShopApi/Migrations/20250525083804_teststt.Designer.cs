// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineShopApi.Data;

#nullable disable

namespace OnlineShopApi.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20250525083804_teststt")]
    partial class teststt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShopApi.Models.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeCivique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK__Adresse__3214EC0756FAF25A");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategorieId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Marque")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Disponible");

                    b.Property<int>("Ventes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK__Articles__3214EC075D233E25");

                    b.HasIndex("CategorieId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Avi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Note")
                        .HasColumnType("integer");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Avis__3214EC0753E1762D");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK__Categori__3214EC072E2E6CB0");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseLivraison")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModeLivraison")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("TempsLivraison")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Commande__3214EC07CA9F09E3");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("OnlineShopApi.Models.CommandeArticle", b =>
                {
                    b.Property<int>("IdCommande")
                        .HasColumnType("integer");

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.HasKey("IdCommande", "IdArticle")
                        .HasName("PK__Commande__3AE43C72B76E3763");

                    b.HasIndex("IdArticle");

                    b.ToTable("CommandeArticle", null, t =>
                        {
                            t.HasTrigger("trg_AfterInsert_CommandeArticle");

                            t.HasTrigger("trg_BeforeInsert_CommandeArticle");
                        });
                });

            modelBuilder.Entity("OnlineShopApi.Models.Favoris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Favoris__3214EC076BB20E90");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Lien")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK__Images__3214EC07725D9907");

                    b.HasIndex("ArticleId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Panier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Panier__3214EC076BB20E90");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Panier");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateInscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("PK__Utilisat__3214EC07F8B396EC");

                    b.HasIndex("AdresseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShopApi.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShopApi.Models.Article", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Category", "Categorie")
                        .WithMany("Articles")
                        .HasForeignKey("CategorieId")
                        .HasConstraintName("FK_Articles_Categories");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Avi", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Article", "Article")
                        .WithMany("Avis")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Avis_Articles");

                    b.HasOne("OnlineShopApi.Models.Utilisateur", "Utilisateur")
                        .WithMany("Avis")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("FK_Avis_Utilisateurs");

                    b.Navigation("Article");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Commande", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Utilisateur", "Utilisateur")
                        .WithMany("Commandes")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("FK_Commandes_Utilisateurs");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("OnlineShopApi.Models.CommandeArticle", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Article", "IdArticleNavigation")
                        .WithMany("CommandeArticles")
                        .HasForeignKey("IdArticle")
                        .IsRequired()
                        .HasConstraintName("FK_CommandeArticle_Articles");

                    b.HasOne("OnlineShopApi.Models.Commande", "IdCommandeNavigation")
                        .WithMany("CommandeArticles")
                        .HasForeignKey("IdCommande")
                        .IsRequired()
                        .HasConstraintName("FK_CommandeArticle_Commandes");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdCommandeNavigation");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Favoris", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Article", "Article")
                        .WithMany("Favoris")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Favoris_Articles");

                    b.HasOne("OnlineShopApi.Models.Utilisateur", "Utilisateur")
                        .WithMany("Favoris")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("FK_Favoris_Utilisateurs");

                    b.Navigation("Article");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Image", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Images_Articles");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Panier", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Article", "Article")
                        .WithMany("Paniers")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Panier_Articles");

                    b.HasOne("OnlineShopApi.Models.Utilisateur", "Utilisateur")
                        .WithMany("Paniers")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("FK_Panier_Utilisateurs");

                    b.Navigation("Article");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Utilisateur", b =>
                {
                    b.HasOne("OnlineShopApi.Models.Adresse", "Adresse")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("FK_Utilisateurs_Adresse");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Adresse", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Article", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("CommandeArticles");

                    b.Navigation("Favoris");

                    b.Navigation("Images");

                    b.Navigation("Paniers");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Commande", b =>
                {
                    b.Navigation("CommandeArticles");
                });

            modelBuilder.Entity("OnlineShopApi.Models.Utilisateur", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("Commandes");

                    b.Navigation("Favoris");

                    b.Navigation("Paniers");
                });
#pragma warning restore 612, 618
        }
    }
}
